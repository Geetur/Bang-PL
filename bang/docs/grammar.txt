(* ------------------------------------------------------------ *)
(*  Bang Programming Language — Comprehensive Grammar (EBNF)   *)
(*  Author: Jeter Pontes                                 *)
(*  Last‑updated: 8 Jun 2025                                      *)
(* ------------------------------------------------------------ *)

(* ------------------------------------------------------------------ *)
(* 1.  LEXICAL GRAMMAR                                               *)
(* ------------------------------------------------------------------ *)

(* 1.1  Characters & basic classes *)
letter         = "A".."Z" | "a".."z" ;
digit          = "0".."9" ;
newline        = "\u000A" ;
underscore     = "_" ;
quote          = '"' ;
commentStart   = "#" ;

(* 1.2  Tokens *)
Identifier     = (letter | underscore) { letter | digit | underscore } ;
IntegerLiteral = digit { digit } ;
FloatLiteral   = digit { digit } "." { digit } ;
BooleanLiteral = "true" | "false" ;
NoneLiteral    = "none" ; 
StringLiteral  = quote { ANY  − quote − newline } quote ;

(* 1.3  Operators & punctuation  (all are single tokens) *)
PLUS           = "+" ;                MINUS        = "-" ;
ASTERISK       = "*" ;                SLASH        = "/" ;
DSLASH         = "//" ;               EXPO         = "**" ;
ASSIGN         = "=" ;                PLUS_ASSIGN  = "+=" ;
MINUS_ASSIGN   = "-=" ;               ASTERISK_ASSIGN = "*=" ;
SLASH_ASSIGN   = "/=" ;
LT             = "<" ;                LEQ          = "<=" ;
GT             = ">" ;                GTEQ         = ">=" ;
EQ             = "==" ;               NEQ          = "!=" ;
AND            = "&&" ;               OR           = "||" ;
NEGATE         = "!" ;
LPAREN         = "(" ;                RPAREN       = ")" ;
LBRACKET       = "[" ;                RBRACKET     = "]" ;
LBRACE         = "{" ;                RBRACE       = "}" ;
COMMA          = "," ;

(* 1.4  Keywords (all lowercase) *)
KW_IF          = "if" ;         KW_ELIF    = "elif" ;
KW_ELSE        = "else" ;       KW_FOR     = "for" ;
KW_WHILE       = "while" ;      KW_FN      = "fn" ;
KW_RETURN      = "return" ;     KW_BREAK   = "break" ;
KW_CONTINUE    = "continue" ;   KW_END     = "end" ;

(* A line‑end (newline or EOF) terminates a statement in Bang.        *)

(* ------------------------------------------------------------------ *)
(* 2.  ABSTRACT SYNTAX / PARSE‑LEVEL GRAMMAR                          *)
(* ------------------------------------------------------------------ *)

Program        = { Statement } EOF ;

Statement      = AssignmentStmt
               | ExpressionStmt
               | IfHeader
               | ElifHeader
               | ElseHeader
               | ForHeader
               | WhileHeader
               | FunctionHeader
               | Callstmnt
               | ReturnStmt
               | BreakStmt
               | ContinueStmt
               | EndStmt
               ;

(* 2.1  Control‑flow headers                                          *)
IfHeader       = KW_IF     Expression ;
ElifHeader     = KW_ELIF   Expression ;     (* must directly follow an if/elif *)
ElseHeader     = KW_ELSE ;                  (* must directly follow if/elif  *)
ForHeader      = KW_FOR    Identifier Expression ;  (* e.g. `for i 10` goes 0-10 *)
WhileHeader    = KW_WHILE  Expression ;
FunctionHeader = KW_FN     Identifier Identifier ;   (* fn <name> <argListName> *)
EndStmt        = KW_END ;

(* 2.2  Loop/flow single‑token bodies *)
BreakStmt      = KW_BREAK ;
ContinueStmt   = KW_CONTINUE ;

(* 2.3  Return *)
ReturnStmt     = KW_RETURN Expression ;

(* 2.4  Assignments *)
AssignmentStmt = ( Indexable | Identifier ) AssignOp Expression ;
AssignOp       = ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | SLASH_ASSIGN | ASTERISK_ASSIGN ;
Indexable      = Identifier IndexSuffix { IndexSuffix } ;
IndexSuffix    = LBRACKET Expression RBRACKET ;

(* 2.5  Expression‑as‑statement *)
ExpressionStmt = Expression ;                 (* useful for function calls, etc. *)

(* ------------------------------------------------------------------ *)
(* 3.  EXPRESSION GRAMMAR                                             *)
(*    The following precedence levels (high → low) match the Bang     *)
(*    parser implementation. Unary ops are right‑associative except   *)
(*    where noted.                                                    *)
(* ------------------------------------------------------------------ *)

Expression     = OrExpr ;

OrExpr         = AndExpr       { OR   AndExpr } ;
AndExpr        = EqualityExpr  { AND  EqualityExpr } ;
EqualityExpr   = RelExpr       { (EQ | NEQ)   RelExpr } ;
RelExpr        = AddExpr       { (LT | LEQ | GT | GTEQ) AddExpr } ;
AddExpr        = MulExpr       { (PLUS | MINUS)        MulExpr } ;
MulExpr        = ExpoExpr      { (ASTERISK | SLASH | DSLASH) ExpoExpr } ;
ExpoExpr       = UnaryExpr     { EXPO                UnaryExpr } ;       (* right‑assoc *)
UnaryExpr      = ( PLUS | MINUS | NEGATE ) UnaryExpr
               | Primary ;

Primary        = Literal
               | Identifier
               | ArrayLiteral
               | FunctionCall
               | IndexExpr
               | LPAREN Expression RPAREN ;

Literal        = IntegerLiteral | FloatLiteral | BooleanLiteral | StringLiteral | NoneLiteral ;

(* 3.1  Composite primaries *)
ArrayLiteral   = LBRACKET [ Expression { COMMA Expression } ] RBRACKET ;

IndexExpr      = Primary IndexSuffix { IndexSuffix } ;

FunctionCall   = Identifier LBRACE [ ArgList ] RBRACE ;
ArgList        = Expression { COMMA Expression } ;

(* ------------------------------------------------------------------ *)
(* 4.  SEMANTIC & STRUCTURAL NOTES (informative, not enforced here)   *)
(* ------------------------------------------------------------------ *)
(* • Statements are separated by line‑breaks in the source text.        *)
(* • Blocks are implicit: after an IfHeader / ForHeader / WhileHeader   *)
(*   or FunctionHeader, all subsequent statements belong to that block  *)
(*   until a matching KW_END (or KW_RETURN for functions).              *)
(* • ElifHeader and ElseHeader are only legal immediately inside the    *)
(*   current open If‑block.                                             *)
(* • Break/Continue are only legal when loop_depth > 0 (see semantics). *)
(* • FunctionHeader opens a new scope; the body ends just *before* the  *)
(*   KW_RETURN line (ReturnStmt) and the final KW_END.                  *)
(* • Assignment left‑hand side may be an Identifier or any IndexExpr.   *)

(* ------------------------------------------------------------------ *)
(* 5.  EXAMPLE (illustrative only)                                     *)
(* ------------------------------------------------------------------ *)
(*
    fn sum_n_args args
        sum = 0
        for i args
            sum += i
            end
        return sum


*)

(* ----------------------------  End  -------------------------------- *)
