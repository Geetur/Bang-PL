a = [5, [2]] 
# solution to two sum
fn two_sum args
    target = args[0]
    input = args[1]
    for range1 [0, len{input} - 1]
        for range2 [range1 + 1, len{input}]
            if input[range1] + input[range2] == target
                print{input[range1], input[range2]}
            end
        end
    end
end



# printing n fibonacii numbers
fn fib awesome
    n = awesome[0]
    a = 0
    b = 1
    print{a}
    print{b}
    for i n-2
        c = a + b
        print{c}
        a = b
        b = c
    end
end
fib{9}

print{"hello:, world"}
x = [[0] * 5] * 5
fn fibb args
    n = args[0]
    if n == 0
        return 0
    end
    if n == 1
        return 1
    end
    return fibb{n - 1} + fibb{n - 2}
end

accounts = [[2,8,7],[7,1,3],[1,9,5]]
fn max_sum args
    ans = 0
    for i args[0]
        ans = max{ans, sum{i}}
    end
    return ans
end

fn rob args
    nums = args[0]

    if len{nums} <= 2
        return max{nums}
    end

    nums[-2] = max{nums[-1], nums[-2]}

    for range1 [len{nums} - 3, -1, -1]
        nums[range1] = max{nums[range1] + nums[range1 + 2], nums[range1 + 1]}
    end

    return nums[0]
end




fn minPathSum args
        grid = args[0]
        for range1 [len{grid}]
            i = range1
            for range2 [len{grid[0]}]
                j = range2
                if i == 0 && j == 0
                    continue
                elif i == 0
                    grid[i][j] += grid[i][j]
                    end
                elif range2 == 0
                    grid[i][j] += grid[i - 1][j]
                    end
                else
                    grid[i][j] += min{grid[i][j - 1], grid[i - 1][j]}
                    end
                end
            end
        end
        return grid[-1][-1]
        end

print{minPathSum{[[1,2,3],[4,5,6]]}}











