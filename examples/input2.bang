a = [5, [2]] 
# solution to two sum
fn two_sum args
    [target, input, ans] = [args[0], args[1], []] 
    for range1 [0, len{input} - 1]; 
    for range2 [range1 + 1, len{input}]
            if input[range1] + input[range2] == target
                ans += [[input[range1], input[range2]]]
            end; end; end
    return ans; 
    end

print{two_sum{8, [1,2,3,4,5,6,7,]}}


# printing n fibonacii numbers
fn fib awesome
    [n, a, b] = [awesome[0], 0, 1]
    print{a}; print{b}
    for i n-2
        c = a + b ; [a,b] = [b, c]
        print{c}
    end
end



x = [[0] * 5] * 5
fn fibb args
    n = args[0]
    if n == 0; return 0; end
    if n == 1; return 1; end
    return fibb{n - 1} + fibb{n - 2}
end

accounts = [[2,8,7],[7,1,3],[1,9,5]]
fn max_sum args
    ans = 0
    for i args[0]
        ans = max{ans, sum{i}}
    end
    return ans
end

fn rob args
    nums = args[0]

    if len{nums} <= 2
        return max{nums}
    end

    nums[-2] = max{nums[-1], nums[-2]}

    for range1 [len{nums} - 3, -1, -1]
        nums[range1] = max{nums[range1] + nums[range1 + 2], nums[range1 + 1]}
    end

    return nums[0]
end




fn minPathSum args
        grid = args[0]
        for range1 [len{grid}]
            i = range1
            for range2 [len{grid[0]}]
                j = range2
                if i == 0 && j == 0
                    continue
                elif i == 0
                    grid[i][j] += grid[i][j]
                    end
                elif range2 == 0
                    grid[i][j] += grid[i - 1][j]
                    end
                else
                    grid[i][j] += min{grid[i][j - 1], grid[i - 1][j]}
                    end
                end
            end
        end
        return grid[-1][-1]
        end


fn lengthOfLIS args
        nums = args[0]
        dp = [1] * len{nums}
        ans = 0
        for range1 [len{nums} - 1, -1, -1]
            i = range1
            for range2 [i + 1, len{nums}]
                j = range2
                if nums[j] > nums[i]
                    dp[i] = max{dp[i], dp[j] + 1}
                end
            end
            ans = max{ans, dp[i]}
        end

        return ans
end


fn fact args
    n = args[0]
    acc = args[1]  # accumulator defaults to 1 at top call
    if n <= 1
        return acc
    end
    return fact{n - 1, acc * n}
end


arr = ["1",2]
fn minMoves2 args
        nums = sort{args[0]}
        c = 0
        mid = nums[len{nums} // 2]
        for i nums
            if i < mid
                c += mid - i
            else
                c += i - mid
                end
            end
        end
        return c
    end

[hello, world] = [5, 2]

[hello, world] *= arr

a = dict{1,3}
b = dict{1, 2} + dict{"hello", "world"}

print{set{1,2,none}[1]}
















