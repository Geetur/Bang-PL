a = [5, [2]] 

# linear solution to two sum
fn two_sum args

    [target, input] = [args[0], args[1]]
    [ans, seen] = [[], set{}]
    for i input
        if target - i in seen
            ans += [[target - i, i]] 
            end
        seen += set{i} 
        end
    return ans 
    end

# printing n fibonacci numbers
fn fib awesome
    ret = []
    [n, a, b] = [awesome[0], 0, 1]
    ret += [a, b]
    for i n-2
        c = a + b ; [a,b] = [b, c]
        ret += [c]
    end
    return ret
end




x = [[0] * 5] * 5
fn fibb args
    n = args[0]
    if n == 0; return 0; end
    if n == 1; return 1; end
    return fibb{n - 1} + fibb{n - 2}
end

fn max_sum args
    ans = 0
    for i args[0]
        ans = max{ans, sum{i}}
    end
    return ans
end

fn rob args
    nums = args[0]

    if len{nums} <= 2
        return max{nums}
    end

    nums[-2] = max{nums[-1], nums[-2]}

    for i range{len{nums} - 3, -1, -1}
        nums[i] = max{nums[i] + nums[i + 2], nums[i + 1]}
    end

    return nums[0]
end




fn minPathSum args
        grid = args[0]
        for i range{len{grid}}
            for j range{len{grid[0]}}
                if i == 0 && j == 0
                    continue
                elif i == 0
                    grid[i][j] += grid[i][j - 1]
                    end
                elif j == 0
                    grid[i][j] += grid[i - 1][j]
                    end
                else
                    grid[i][j] += min{grid[i][j - 1], grid[i - 1][j]}
                    end
                end
            end
        end
        return grid[-1][-1]
        end


fn lengthOfLIS args
        nums = args[0]
        dp = [1] * len{nums}
        ans = 0
        for i range{len{nums} - 1, -1, -1}
            for j range{i + 1, len{nums}}
                if nums[j] > nums[i]
                    dp[i] = max{[dp[i], dp[j] + 1]}
                end
            end
            ans = max{ans, dp[i]}
        end

        return ans
end


fn fact args
    n = args[0]
    acc = args[1]  # accumulator defaults to 1 at top call
    if n <= 1
        return acc
    end
    return fact{n - 1, acc * n}
end


fn minMoves2 args
        nums = sort{args[0]}
        c = 0
        mid = nums[len{nums} // 2]
        for i nums
            if i < mid
                c += mid - i
            else
                c += i - mid
                end
            end
        end
        return c
    end

[hello, world] = [5, 2]

[hello, world] *= [1, 2]

a = dict{1,3}
b = dict{1,2, 3,4, 5,6}
c = max{1, 2}
[a, b[3], [x, y]] = [1, 2, [1, 4]]

fn bar args 
return dict
end

[1,2,3,4,5][1] = [2, 3]

print{a,b,c}; print{x, y}
func_dic = dict{"bar", bar, "hello", dict}

to_call = func_dic["hello"]
print{to_call{1,2, 4, 5}}

print{bar{}{1,2}}

fn foo args 
return [[[len]]]
end
x = foo{}[0][0][0]{"123456hi"}
print{range{9, 1, -1}}

for i range{9}; i += 1; end;


# for function testing - >

print{lengthOfLIS{[7,7,7,7,7,7,7]}} # expecting 1
print{minPathSum{[[1,3,1],[1,5,1],[4,2,1]]}} # expecting 7
print{fib{9}} # expecting [first n fib numbers]
print{two_sum{8, [1,2,3,4,5,6,7,]}} # expecting list of list of length two that sum to arg[0]
print{max_sum{[[2,8,7],[7,1,3],[1,9,5]]}} # expecting maximum sum of any list of nested lists
print{minMoves2{[1,10,2,9]}} #expecting 16
print{rob{[2,7,9,3,1]}} #expecting 12

#end function testting

print{two_sum, 1}
[a, b] = range{2}

a = set{}







