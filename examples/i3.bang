

random = 1 + 1 + 4 + ( 5 * 9 ) / 4


a = 5 + 4.35556

print{a}

data Car [model_type, engine_type, color_type]; car = Car{}

data ColorType [hex_color, general_color]; color_type = ColorType{}

fn a args
return args[0]
end

car.color_type = a{color_type}

car.color_type.general_color = "blue"

print{car.color_type.general_color / ""}

data Class [rand]; class = Class{[1,2,3]}; v = set{(class.rand + [1,2,3,4,5]) * 3}

print{v};

data P [x]; arr = [P{1}, P{2}]; arr[0].x = 9; print{arr[0].x}

fn inc args; return args[0] + 1; end; data C [f]; c = C{inc}; print{c.f{41}}

#fn bar args; return 5; end; data Class [rand]; fn foo args; return Class{bar}; end; x = foo{}.rand + [2,3,4]; print{x}

data P [x]; fn foo args; return P{1}; end; print{foo{}.x}
p = P{}
print{inc}
print{P}
print{p}


data Node [val, next];

# Build from array -> head
fn from_array args
    arr = args[0]
    [head, tail, i] = [none, none, 0]
    while i < len{arr}
        n = Node{arr[i]}
        if head == none 
            [head, tail] = [n, n]
        else 
            tail.next = n; tail = n
            end
        end
        i += 1
    end
    return head
end

arr = [1,2,3,4,5,6,7]
linked_list_head = from_array{arr}
print{linked_list_head.val}
# Reverse list (returns new head)
fn reverse args 
    prev = none; cur = args[0];
    while cur != none 
        nxt = cur.next
        cur.next = prev
        prev = cur
        cur = nxt
    end
    return prev
end

rev_linked_list = reverse{linked_list_head}
print{rev_linked_list.val}

